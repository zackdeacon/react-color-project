{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { arrayMove } from 'react-sortable-hoc';\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newColorName: \"\",\n      currentColor: \"teal\"\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  render() {\n    const {\n      paletteIsFull\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: this.state.currentColor,\n        onChangeComplete: this.updateCurrentColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: this.addNewColor,\n        children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n          value: this.state.newColorName,\n          name: \"newColorName\",\n          onChange: this.handleChange,\n          validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n          errorMessages: [\"this field is required\", \"Color name must be unique\", \"Color already used\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          color: \"primary\",\n          style: {\n            backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor\n          },\n          disabled: paletteIsFull,\n          children: paletteIsFull ? \"Palette Full\" : \"Add Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default ColorPickerForm;","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/ColorPickerForm.js"],"names":["React","Component","PaletteFormNav","classNames","withStyles","Drawer","Typography","Divider","IconButton","ChevronLeftIcon","ChromePicker","Button","DraggableColorList","ValidatorForm","TextValidator","arrayMove","ColorPickerForm","constructor","props","state","newColorName","currentColor","updateCurrentColor","bind","newColor","setState","hex","render","paletteIsFull","addNewColor","handleChange","backgroundColor"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,kBAAP,MAA+B,sBAA/B;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAEA,MAAMC,eAAN,SAA8Bf,SAA9B,CAAwC;AACpCgB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,YAAY,EAAE,EADL;AAETC,MAAAA,YAAY,EAAE;AAFL,KAAb;AAIA,SAAKC,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBC,IAAxB,CAA6B,IAA7B,CAA1B;AAEH;;AACDD,EAAAA,kBAAkB,CAACE,QAAD,EAAW;AACzB,SAAKC,QAAL,CAAc;AAAEJ,MAAAA,YAAY,EAAGG,QAAQ,CAACE;AAA1B,KAAd;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEC,MAAAA;AAAF,QAAoB,KAAKV,KAA/B;AACA,wBACI;AAAA,8BACI,QAAC,YAAD;AACI,QAAA,KAAK,EAAE,KAAKC,KAAL,CAAWE,YADtB;AAEI,QAAA,gBAAgB,EAAE,KAAKC;AAF3B;AAAA;AAAA;AAAA;AAAA,cADJ,eAKI,QAAC,aAAD;AAAe,QAAA,QAAQ,EAAE,KAAKO,WAA9B;AAAA,gCACI,QAAC,aAAD;AACI,UAAA,KAAK,EAAE,KAAKV,KAAL,CAAWC,YADtB;AAEI,UAAA,IAAI,EAAC,cAFT;AAGI,UAAA,QAAQ,EAAE,KAAKU,YAHnB;AAII,UAAA,UAAU,EAAE,CAAC,UAAD,EAAa,mBAAb,EAAkC,eAAlC,CAJhB;AAKI,UAAA,aAAa,EAAE,CAAC,wBAAD,EAA2B,2BAA3B,EAAwD,oBAAxD;AALnB;AAAA;AAAA;AAAA;AAAA,gBADJ,eAQI,QAAC,MAAD;AACI,UAAA,OAAO,EAAC,WADZ;AAEI,UAAA,IAAI,EAAC,QAFT;AAGI,UAAA,KAAK,EAAC,SAHV;AAII,UAAA,KAAK,EAAE;AAAEC,YAAAA,eAAe,EAAEH,aAAa,GAAG,MAAH,GAAY,KAAKT,KAAL,CAAWE;AAAvD,WAJX;AAKI,UAAA,QAAQ,EAAEO,aALd;AAAA,oBAMEA,aAAa,GAAG,cAAH,GAAoB;AANnC;AAAA;AAAA;AAAA;AAAA,gBARJ;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AA0BH;;AA1CmC;;AA6CxC,eAAeZ,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { arrayMove } from 'react-sortable-hoc';\n\nclass ColorPickerForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            newColorName: \"\",\n            currentColor: \"teal\"\n        }\n        this.updateCurrentColor = this.updateCurrentColor.bind(this);\n\n    }\n    updateCurrentColor(newColor) {\n        this.setState({ currentColor : newColor.hex })\n    }\n\n    render() {\n        const { paletteIsFull } = this.props;\n        return (\n            <div>\n                <ChromePicker\n                    color={this.state.currentColor}\n                    onChangeComplete={this.updateCurrentColor}\n                />\n                <ValidatorForm onSubmit={this.addNewColor}>\n                    <TextValidator\n                        value={this.state.newColorName}\n                        name=\"newColorName\"\n                        onChange={this.handleChange}\n                        validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n                        errorMessages={[\"this field is required\", \"Color name must be unique\", \"Color already used\"]}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        color=\"primary\"\n                        style={{ backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor }}\n                        disabled={paletteIsFull}\n                    >{paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n                    </Button>\n                </ValidatorForm>\n\n            </div>\n        )\n    }\n}\n\nexport default ColorPickerForm;\n"]},"metadata":{},"sourceType":"module"}