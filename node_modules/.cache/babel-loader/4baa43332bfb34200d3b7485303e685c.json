{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { Button } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth,\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  },\n  container: {\n    width: \"90%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    justfifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"100%\"\n  },\n  buttons: {\n    width: \"100%\"\n  },\n  button: {\n    width: \"50%\"\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      colors: this.props.palettes[0].colors\n    };\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  addNewColor(newColor) {\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit(newPaletteName) {\n    const newPalette = {\n      paletteName: newPaletteName,\n      id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors,\n      palettes\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(PaletteFormNav, {\n        open: open,\n        palettes: palettes,\n        handleSubmit: this.handleSubmit,\n        handleDrawerOpen: this.handleDrawerOpen\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n        className: classes.drawer,\n        variant: \"persistent\",\n        anchor: \"left\",\n        open: open,\n        classes: {\n          paper: classes.drawerPaper\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: this.handleDrawerClose,\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.container,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h4\",\n            children: \"Design your palette!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.buttons,\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"secondary\",\n              className: classes.button,\n              onClick: this.clearColors,\n              children: \"Clear Palette\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              className: classes.button,\n              color: \"primary\",\n              onClick: this.addRandomColor,\n              disabled: paletteIsFull,\n              children: \"Random Color\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 172,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ColorPickerForm, {\n            paletteIsFull: paletteIsFull,\n            addNewColor: this.addNewColor,\n            colors: colors\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classNames(classes.content, {\n          [classes.contentShift]: open\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DraggableColorList, {\n          colors: colors,\n          removeColor: this.removeColor,\n          axis: \"xy\",\n          onSortEnd: this.onSortEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","PaletteFormNav","classNames","withStyles","Drawer","Typography","ColorPickerForm","Divider","IconButton","ChevronLeftIcon","Button","DraggableColorList","arrayMove","drawerWidth","styles","theme","root","display","hide","drawer","width","flexShrink","drawerPaper","alignItems","drawerHeader","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","transition","transitions","create","easing","sharp","duration","leavingScreen","marginLeft","contentShift","easeOut","enteringScreen","container","flexDirection","justfifyContent","buttons","button","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","colors","state","currentColor","palettes","addNewColor","bind","handleChange","handleSubmit","removeColor","clearColors","addRandomColor","newColor","newColorName","evt","target","name","value","newPaletteName","newPalette","paletteName","id","toLowerCase","replace","savePalette","history","push","colorName","filter","color","allColors","map","p","flat","rand","Math","floor","random","length","randomColor","render","classes","maxColors","paletteIsFull","paper","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ColorPickerForm from \"./ColorPickerForm\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { Button } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n    root: {\n        display: \"flex\"\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth,\n        display: \"flex\",\n        alignItems: \"center\"\n    },\n    drawerHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"0 8px\",\n        ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\"\n    },\n    content: {\n        flexGrow: 1,\n        height: \"calc(100vh - 64px)\",\n        padding: theme.spacing.unit * 3,\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        marginLeft: -drawerWidth\n    },\n    contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: 0\n    },\n    container: {\n        width: \"90%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justfifyContent: \"center\",\n        alignItems: \"center\",\n        height: \"100%\"\n    },\n    buttons : {\n        width: \"100%\"\n    },\n    button: {\n        width: \"50%\"\n    }\n});\nclass NewPaletteForm extends Component {\n    static defaultProps = {\n        maxColors: 20\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            open: true,\n            currentColor: \"teal\",\n            colors: this.props.palettes[0].colors\n        }\n        this.addNewColor = this.addNewColor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.removeColor = this.removeColor.bind(this);\n        this.clearColors = this.clearColors.bind(this);\n        this.addRandomColor = this.addRandomColor.bind(this);\n    }\n    handleDrawerOpen = () => {\n        this.setState({ open: true });\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false });\n    };\n    addNewColor(newColor) {\n        this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" })\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleSubmit(newPaletteName) {\n        const newPalette = {\n            paletteName: newPaletteName,\n            id: newPaletteName.toLowerCase().replace(/ /g, \"-\"),\n            colors: this.state.colors\n        };\n        this.props.savePalette(newPalette);\n        this.props.history.push(\"/\");\n    }\n    removeColor(colorName) {\n        this.setState({\n            colors: this.state.colors.filter(color => color.name !== colorName)\n        });\n    }\n    onSortEnd = ({oldIndex, newIndex}) => {\n        this.setState(({colors}) => ({\n            colors: arrayMove(colors, oldIndex, newIndex),\n        }));\n    };\n    clearColors() {\n        this.setState({\n            colors: []\n        })\n    }\n    addRandomColor() {\n        const allColors = this.props.palettes.map(p => p.colors).flat();\n        var rand = Math.floor(Math.random() * allColors.length);\n        const randomColor = allColors[rand];\n        this.setState({\n            colors : [...this.state.colors, randomColor]\n        })\n    }\n    render() {\n        const { classes, maxColors, palettes } = this.props;\n        const { open, colors } = this.state;\n        const paletteIsFull = (colors.length >= maxColors);\n        return (\n            <div className={classes.root}>\n                <PaletteFormNav \n                open={open} \n                palettes={palettes} \n                handleSubmit={this.handleSubmit}\n                handleDrawerOpen={this.handleDrawerOpen}\n                />\n                <Drawer\n                    className={classes.drawer}\n                    variant='persistent'\n                    anchor='left'\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                >\n                    <div className={classes.drawerHeader}>\n                        <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </div>\n                    <Divider />\n                    <div className = {classes.container}>\n                    <Typography variant=\"h4\">Design your palette!</Typography>\n                    <div className = {classes.buttons}>\n                    <Button \n                    variant=\"contained\" \n                    color=\"secondary\" \n                    className = {classes.button}\n                    onClick={this.clearColors}>Clear Palette\n                    </Button>\n                    <Button \n                    variant=\"contained\" \n                    className = {classes.button}\n                    color=\"primary\" \n                    onClick={this.addRandomColor}\n                    disabled={paletteIsFull}\n                    >Random Color</Button>\n                    </div>\n                    <ColorPickerForm paletteIsFull={paletteIsFull} addNewColor={this.addNewColor} colors = {colors}/>\n                    </div>\n                </Drawer>\n                <main\n                    className={classNames(classes.content, {\n                        [classes.contentShift]: open\n                    })}\n                >\n                    <div className={classes.drawerHeader} />\n                    <DraggableColorList \n                    colors={colors} \n                    removeColor={this.removeColor}\n                    axis=\"xy\"\n                    onSortEnd={this.onSortEnd}\n                    />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}