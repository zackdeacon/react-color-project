{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/ColorPickerForm.js\";\nimport React, { Component } from 'react';\nimport { ChromePicker } from \"react-color\";\nimport { Button } from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { withStyles } from \"@material-ui/core/styles\";\nconst styles = {\n  picker: {\n    width: \"100% !important\",\n    marginTop: \"2rem\"\n  }\n};\n\nclass ColorPickerForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      newColorName: \"\",\n      currentColor: \"teal\"\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.props.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.props.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.props.addNewColor(newColor);\n    this.setState({\n      newColorName: \"\"\n    });\n  }\n\n  render() {\n    const {\n      paletteIsFull,\n      classes\n    } = this.props;\n    const {\n      currentColor,\n      newColorName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ChromePicker, {\n        color: currentColor,\n        onChangeComplete: this.updateCurrentColor,\n        className: classes.picker\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: this.handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n          value: newColorName,\n          name: \"newColorName\",\n          onChange: this.handleChange,\n          validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n          errorMessages: [\"this field is required\", \"Color name must be unique\", \"Color already used\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          type: \"submit\",\n          color: \"primary\",\n          className: classes.addColor,\n          style: {\n            backgroundColor: paletteIsFull ? \"grey\" : currentColor\n          },\n          disabled: paletteIsFull,\n          children: paletteIsFull ? \"Palette Full\" : \"Add Color\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withStyles(styles)(ColorPickerForm);","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/ColorPickerForm.js"],"names":["React","Component","ChromePicker","Button","ValidatorForm","TextValidator","withStyles","styles","picker","width","marginTop","ColorPickerForm","constructor","props","state","newColorName","currentColor","updateCurrentColor","bind","handleChange","handleSubmit","componentDidMount","addValidationRule","value","colors","every","name","toLowerCase","color","newColor","setState","hex","evt","target","addNewColor","render","paletteIsFull","classes","addColor","backgroundColor"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { ChromePicker } from \"react-color\";\nimport { Button } from '@material-ui/core';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst styles = {\n    picker: {\n        width: \"100% !important\",\n        marginTop: \"2rem\"\n    }\n}\n\nclass ColorPickerForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            newColorName: \"\",\n            currentColor: \"teal\"\n        }\n        this.updateCurrentColor = this.updateCurrentColor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n        this.props.colors.every(\n            ({ name }) => name.toLowerCase() !== value.toLowerCase()\n        )        \n    );\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => \n    this.props.colors.every(\n        (({ color }) => color !== this.state.currentColor)\n        )        \n    );\n    }\n    updateCurrentColor(newColor) {\n        this.setState({ currentColor : newColor.hex })\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleSubmit() {\n        const newColor = { \n            color: this.state.currentColor,\n            name: this.state.newColorName\n            };\n            this.props.addNewColor(newColor);\n            this.setState({ newColorName : \"\" })\n    };\n    render() {\n        const { paletteIsFull, classes } = this.props;\n        const { currentColor, newColorName } = this.state;\n        return (\n            <div>\n                <ChromePicker\n                    color={currentColor}\n                    onChangeComplete={this.updateCurrentColor}\n                    className = {classes.picker}\n                />\n                <ValidatorForm onSubmit={this.handleSubmit}>\n                    <TextValidator\n                        value={newColorName}\n                        name=\"newColorName\"\n                        onChange={this.handleChange}\n                        validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n                        errorMessages={[\"this field is required\", \"Color name must be unique\", \"Color already used\"]}\n                    />\n                    <Button\n                        variant=\"contained\"\n                        type=\"submit\"\n                        color=\"primary\"\n                        className={classes.addColor}\n                        style={{ backgroundColor: paletteIsFull ? \"grey\" : currentColor }}\n                        disabled={paletteIsFull}\n                    >{paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n                    </Button>\n                </ValidatorForm>\n\n            </div>\n        )\n    }\n}\n\nexport default withStyles(styles)(ColorPickerForm);\n"]},"metadata":{},"sourceType":"module"}