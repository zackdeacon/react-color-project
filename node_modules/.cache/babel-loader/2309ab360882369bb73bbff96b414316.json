{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      open: false,\n      newPaletteName: \"\"\n    };\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      open: false\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  render() {\n    const {\n      open,\n      newPaletteName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      open: open,\n      onClose: this.handleClose,\n      \"aria-labelledby\": \"form-dialog-title\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: \"Choose a palette name!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n        onSubmit: () => this.props.handleSubmit(newPaletteName),\n        children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n          children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n            children: \"Please enter a name for your new color palette!! Make sure its a unique name.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n            value: newPaletteName,\n            label: \"palette Name\",\n            name: \"newPaletteName\",\n            onChange: this.handleChange,\n            fullWidth: true,\n            margin: \"normal\",\n            validators: [\"required\", \"isPaletteNameUnique\"],\n            errorMessage: [\"Enter A Palette Name\", \"Name Already Used\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: this.handleClose,\n            color: \"primary\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            type: \"submit\",\n            children: \"Save Palette\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 17\n    }, this);\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/PaletteMetaForm.js"],"names":["React","Component","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","PaletteMetaForm","constructor","props","state","open","newPaletteName","handleClickOpen","bind","handleClose","handleChange","componentDidMount","addValidationRule","value","palettes","every","paletteName","toLowerCase","setState","evt","target","name","render","handleSubmit"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\n\nclass PaletteMetaForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            newPaletteName: \"\"\n        }\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n            this.props.palettes.every(\n                ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n            )\n        );\n    }\n    handleClickOpen() {\n        this.setState({ open: true });\n    }\n    handleClose() {\n        this.setState({ open: false });\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    render() {\n        const { open, newPaletteName } = this.state;\n        return (\n                <Dialog open={open} onClose={this.handleClose} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Choose a palette name!</DialogTitle>\n                    <ValidatorForm\n                            onSubmit={() => this.props.handleSubmit(newPaletteName)}>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter a name for your new color palette!! Make sure its a unique name. \n                </DialogContentText>\n                            <TextValidator\n                                value={newPaletteName}\n                                label=\"palette Name\"\n                                name=\"newPaletteName\"\n                                onChange={this.handleChange}\n                                fullWidth\n                                margin = \"normal\"\n                                validators={[\"required\", \"isPaletteNameUnique\"]}\n                                errorMessage={[\"Enter A Palette Name\", \"Name Already Used\"]}\n                            />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            Cancel\n                </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\">\n                            Save Palette\n                            </Button>\n                    </DialogActions>\n                    </ValidatorForm>\n                </Dialog>\n        )\n    }\n}\n\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}