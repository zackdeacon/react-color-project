{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/PaletteMetaForm.js\";\nimport React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport 'emoji-mart/css/emoji-mart.css';\n\nclass PaletteMetaForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      stage: \"form\",\n      newPaletteName: \"\"\n    };\n    this.handleClickOpen = this.handleClickOpen.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.showEmojiPicker = this.showEmojiPicker.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  handleClickOpen() {\n    this.setState({\n      open: true\n    });\n  }\n\n  handleClose() {\n    this.setState({\n      open: false\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  showEmojiPicker() {\n    this.setState({\n      stage: \"emoji\"\n    });\n  }\n\n  render() {\n    const {\n      open,\n      newPaletteName\n    } = this.state;\n    const {\n      hideForm,\n      handleSubmit\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.stage === \"emoji\",\n        children: /*#__PURE__*/_jsxDEV(Picker, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n        open: this.state.stage === \"form\",\n        onClose: hideForm,\n        \"aria-labelledby\": \"form-dialog-title\",\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          id: \"form-dialog-title\",\n          children: \"Choose a palette name!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n          onSubmit: this.showEmojiPicker,\n          children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n            children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n              children: \"Please enter a name for your new color palette!! Make sure its a unique name.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(TextValidator, {\n              value: newPaletteName,\n              label: \"palette Name\",\n              name: \"newPaletteName\",\n              onChange: this.handleChange,\n              fullWidth: true,\n              margin: \"normal\",\n              validators: [\"required\", \"isPaletteNameUnique\"],\n              errorMessage: [\"Enter A Palette Name\", \"Name Already Used\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              onClick: hideForm,\n              color: \"primary\",\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Save Palette\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default PaletteMetaForm;","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/PaletteMetaForm.js"],"names":["React","Component","Button","TextField","Dialog","DialogActions","DialogContent","DialogContentText","DialogTitle","ValidatorForm","TextValidator","Picker","PaletteMetaForm","constructor","props","state","stage","newPaletteName","handleClickOpen","bind","handleClose","handleChange","showEmojiPicker","componentDidMount","addValidationRule","value","palettes","every","paletteName","toLowerCase","setState","open","evt","target","name","render","hideForm","handleSubmit"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,SAASC,aAAT,EAAwBC,aAAxB,QAA6C,kCAA7C;AACA,SAASC,MAAT,QAAuB,YAAvB;AACA,OAAO,+BAAP;;AAGA,MAAMC,eAAN,SAA8BX,SAA9B,CAAwC;AACpCY,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,MADE;AAETC,MAAAA,cAAc,EAAE;AAFP,KAAb;AAIA,SAAKC,eAAL,GAAuB,KAAKA,eAAL,CAAqBC,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKC,WAAL,GAAmB,KAAKA,WAAL,CAAiBD,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKG,eAAL,GAAuB,KAAKA,eAAL,CAAqBH,IAArB,CAA0B,IAA1B,CAAvB;AACH;;AACDI,EAAAA,iBAAiB,GAAG;AAChBd,IAAAA,aAAa,CAACe,iBAAd,CAAgC,qBAAhC,EAAuDC,KAAK,IACxD,KAAKX,KAAL,CAAWY,QAAX,CAAoBC,KAApB,CACI,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAqBA,WAAW,CAACC,WAAZ,OAA8BJ,KAAK,CAACI,WAAN,EADvD,CADJ;AAKH;;AACDX,EAAAA,eAAe,GAAG;AACd,SAAKY,QAAL,CAAc;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAd;AACH;;AACDX,EAAAA,WAAW,GAAG;AACV,SAAKU,QAAL,CAAc;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAAd;AACH;;AACDV,EAAAA,YAAY,CAACW,GAAD,EAAM;AACd,SAAKF,QAAL,CAAc;AACV,OAACE,GAAG,CAACC,MAAJ,CAAWC,IAAZ,GAAmBF,GAAG,CAACC,MAAJ,CAAWR;AADpB,KAAd;AAGH;;AACDH,EAAAA,eAAe,GAAG;AACd,SAAKQ,QAAL,CAAc;AACVd,MAAAA,KAAK,EAAE;AADG,KAAd;AAGH;;AACDmB,EAAAA,MAAM,GAAG;AACL,UAAM;AAAEJ,MAAAA,IAAF;AAAQd,MAAAA;AAAR,QAA2B,KAAKF,KAAtC;AACA,UAAM;AAAEqB,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,QAA6B,KAAKvB,KAAxC;AACA,wBACI;AAAA,8BACA,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,KAAX,KAAqB,OAAnC;AAAA,+BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADA,eAII,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAE,KAAKD,KAAL,CAAWC,KAAX,KAAqB,MAAnC;AAA2C,QAAA,OAAO,EAAEoB,QAApD;AAA8D,2BAAgB,mBAA9E;AAAA,gCACI,QAAC,WAAD;AAAa,UAAA,EAAE,EAAC,mBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AACQ,UAAA,QAAQ,EAAE,KAAKd,eADvB;AAAA,kCAEA,QAAC,aAAD;AAAA,oCACI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAIQ,QAAC,aAAD;AACI,cAAA,KAAK,EAAEL,cADX;AAEI,cAAA,KAAK,EAAC,cAFV;AAGI,cAAA,IAAI,EAAC,gBAHT;AAII,cAAA,QAAQ,EAAE,KAAKI,YAJnB;AAKI,cAAA,SAAS,MALb;AAMI,cAAA,MAAM,EAAG,QANb;AAOI,cAAA,UAAU,EAAE,CAAC,UAAD,EAAa,qBAAb,CAPhB;AAQI,cAAA,YAAY,EAAE,CAAC,sBAAD,EAAyB,mBAAzB;AARlB;AAAA;AAAA;AAAA;AAAA,oBAJR;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAiBA,QAAC,aAAD;AAAA,oCACI,QAAC,MAAD;AAAQ,cAAA,OAAO,EAAEe,QAAjB;AAA2B,cAAA,KAAK,EAAC,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII,QAAC,MAAD;AACI,cAAA,OAAO,EAAC,WADZ;AAEI,cAAA,KAAK,EAAC,SAFV;AAGI,cAAA,IAAI,EAAC,QAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAuCH;;AA7EmC;;AAgFxC,eAAexB,eAAf","sourcesContent":["import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { Picker } from \"emoji-mart\";\nimport 'emoji-mart/css/emoji-mart.css';\n\n\nclass PaletteMetaForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            stage: \"form\",\n            newPaletteName: \"\"\n        }\n        this.handleClickOpen = this.handleClickOpen.bind(this);\n        this.handleClose = this.handleClose.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.showEmojiPicker = this.showEmojiPicker.bind(this);\n    }\n    componentDidMount() {\n        ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n            this.props.palettes.every(\n                ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n            )\n        );\n    }\n    handleClickOpen() {\n        this.setState({ open: true });\n    }\n    handleClose() {\n        this.setState({ open: false });\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    showEmojiPicker() {\n        this.setState({\n            stage: \"emoji\"\n        })\n    }\n    render() {\n        const { open, newPaletteName } = this.state;\n        const { hideForm, handleSubmit } = this.props; \n        return (\n            <div>\n            <Dialog open={this.state.stage === \"emoji\"}>\n                <Picker />\n            </Dialog>\n                <Dialog open={this.state.stage === \"form\"} onClose={hideForm} aria-labelledby=\"form-dialog-title\">\n                    <DialogTitle id=\"form-dialog-title\">Choose a palette name!</DialogTitle>\n                    <ValidatorForm\n                            onSubmit={this.showEmojiPicker}>\n                    <DialogContent>\n                        <DialogContentText>\n                            Please enter a name for your new color palette!! Make sure its a unique name. \n                </DialogContentText>\n                            <TextValidator\n                                value={newPaletteName}\n                                label=\"palette Name\"\n                                name=\"newPaletteName\"\n                                onChange={this.handleChange}\n                                fullWidth\n                                margin = \"normal\"\n                                validators={[\"required\", \"isPaletteNameUnique\"]}\n                                errorMessage={[\"Enter A Palette Name\", \"Name Already Used\"]}\n                            />\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={hideForm} color=\"primary\">\n                            Cancel\n                </Button>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\">\n                            Save Palette\n                            </Button>\n                    </DialogActions>\n                    </ValidatorForm>\n                </Dialog>\n            </div>\n        )\n    }\n}\n\nexport default PaletteMetaForm;\n"]},"metadata":{},"sourceType":"module"}