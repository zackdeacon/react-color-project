{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button, colors } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { arrayMove } from 'react-sortable-hoc';\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.onSortEnd = ({\n      oldIndex,\n      newIndex\n    }) => {\n      this.setState(({\n        colors\n      }) => ({\n        colors: arrayMove(colors, oldIndex, newIndex)\n      }));\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      newPaletteName: \"\",\n      colors: this.props.palettes[0].colors\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.removeColor = this.removeColor.bind(this);\n    this.clearColors = this.clearColors.bind(this);\n    this.addRandomColor = this.addRandomColor.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit() {\n    let newName = this.state.newPaletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  removeColor(colorName) {\n    this.setState({\n      colors: this.state.colors.filter(color => color.name !== colorName)\n    });\n  }\n\n  clearColors() {\n    this.setState({\n      colors: []\n    });\n  }\n\n  addRandomColor() {\n    const allColors = this.props.palettes.map(p => p.colors).flat();\n    var rand = Math.floor(Math.random() * allColors.length);\n    const randomColor = allColors[rand];\n    this.setState({\n      colors: [...this.state.colors, randomColor]\n    });\n  }\n\n  render() {\n    const {\n      classes,\n      maxColors\n    } = this.props;\n    const {\n      open,\n      colors\n    } = this.state;\n    const paletteIsFull = colors.length >= maxColors;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(PaletteFormNav, {\n        open: open,\n        classes: classes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n        className: classes.drawer,\n        variant: \"persistent\",\n        anchor: \"left\",\n        open: open,\n        classes: {\n          paper: classes.drawerPaper\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: this.handleDrawerClose,\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Design your palette!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            onClick: this.clearColors,\n            children: \"Clear Palette\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            onClick: this.addRandomColor,\n            disabled: paletteIsFull,\n            children: \"Random Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n          color: this.state.currentColor,\n          onChangeComplete: this.updateCurrentColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n          onSubmit: this.addNewColor,\n          children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n            value: this.state.newColorName,\n            name: \"newColorName\",\n            onChange: this.handleChange,\n            validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n            errorMessages: [\"this field is required\", \"Color name must be unique\", \"Color already used\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            type: \"submit\",\n            color: \"primary\",\n            style: {\n              backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor\n            },\n            disabled: paletteIsFull,\n            children: paletteIsFull ? \"Palette Full\" : \"Add Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classNames(classes.content, {\n          [classes.contentShift]: open\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(DraggableColorList, {\n          colors: colors,\n          removeColor: this.removeColor,\n          axis: \"xy\",\n          onSortEnd: this.onSortEnd\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nNewPaletteForm.defaultProps = {\n  maxColors: 20\n};\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","Link","PaletteFormNav","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","ChromePicker","Button","colors","DraggableColorList","ValidatorForm","TextValidator","arrayMove","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","onSortEnd","oldIndex","newIndex","state","currentColor","newColorName","newPaletteName","palettes","updateCurrentColor","bind","addNewColor","handleChange","handleSubmit","removeColor","clearColors","addRandomColor","componentDidMount","addValidationRule","value","every","name","toLowerCase","color","paletteName","newColor","hex","evt","target","newName","newPalette","id","replace","savePalette","history","push","colorName","filter","allColors","map","p","flat","rand","Math","floor","random","length","randomColor","render","classes","maxColors","paletteIsFull","paper","backgroundColor","defaultProps","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport PaletteFormNav from \"./PaletteFormNav\";\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button, colors } from '@material-ui/core';\nimport DraggableColorList from \"./DraggableColorList\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nimport { arrayMove } from 'react-sortable-hoc';\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n    root: {\n        display: \"flex\"\n    },\n    appBar: {\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginLeft: 12,\n        marginRight: 20\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth\n    },\n    drawerHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"0 8px\",\n        ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\"\n    },\n    content: {\n        flexGrow: 1,\n        height: \"calc(100vh - 64px)\",\n        padding: theme.spacing.unit * 3,\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        marginLeft: -drawerWidth\n    },\n    contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: 0\n    }\n});\nclass NewPaletteForm extends Component {\n    static defaultProps = {\n        maxColors: 20\n    }\n    constructor(props){\n        super(props);\n        this.state = {\n            open: true,\n            currentColor: \"teal\",\n            newColorName: \"\",\n            newPaletteName: \"\",\n            colors: this.props.palettes[0].colors\n        }\n        this.updateCurrentColor = this.updateCurrentColor.bind(this);\n        this.addNewColor = this.addNewColor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.removeColor = this.removeColor.bind(this);\n        this.clearColors = this.clearColors.bind(this);\n        this.addRandomColor = this.addRandomColor.bind(this);\n    }\n    componentDidMount(){\n        ValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n            this.state.colors.every(\n                ({ name }) => name.toLowerCase() !== value.toLowerCase()\n            )        \n        );\n        ValidatorForm.addValidationRule(\"isColorUnique\", value => \n        this.state.colors.every(\n            (({ color }) => color !== this.state.currentColor)\n            )        \n        );\n        ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value =>\n        this.props.palettes.every(\n          ({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase()\n        )\n      );\n    }  \n    handleDrawerOpen = () => {\n        this.setState({ open: true });\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false });\n    };\n    updateCurrentColor(newColor) {\n        this.setState({ currentColor : newColor.hex })\n    }\n    addNewColor() {\n        const newColor = { \n        color: this.state.currentColor,\n        name: this.state.newColorName\n        };\n        this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" })\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleSubmit() {\n        let newName = this.state.newPaletteName;\n        const newPalette = {\n            paletteName: newName,\n            id: newName.toLowerCase().replace(/ /g, \"-\"),\n            colors: this.state.colors\n        };\n        this.props.savePalette(newPalette);\n        this.props.history.push(\"/\");\n    }\n    removeColor(colorName) {\n        this.setState({\n            colors: this.state.colors.filter(color => color.name !== colorName)\n        });\n    }\n    onSortEnd = ({oldIndex, newIndex}) => {\n        this.setState(({colors}) => ({\n            colors: arrayMove(colors, oldIndex, newIndex),\n        }));\n    };\n    clearColors() {\n        this.setState({\n            colors: []\n        })\n    }\n    addRandomColor() {\n        const allColors = this.props.palettes.map(p => p.colors).flat();\n        var rand = Math.floor(Math.random() * allColors.length);\n        const randomColor = allColors[rand];\n        this.setState({\n            colors : [...this.state.colors, randomColor]\n        })\n    }\n    render() {\n        const { classes, maxColors } = this.props;\n        const { open, colors } = this.state;\n        const paletteIsFull = (colors.length >= maxColors);\n        return (\n            <div className={classes.root}>\n                <PaletteFormNav open={open} classes={classes}/>\n                <Drawer\n                    className={classes.drawer}\n                    variant='persistent'\n                    anchor='left'\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                >\n                    <div className={classes.drawerHeader}>\n                        <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </div>\n                    <Divider />\n                    <Typography variant=\"h4\">Design your palette!</Typography>\n                    <div>\n                    <Button \n                    variant=\"contained\" \n                    color=\"secondary\" \n                    onClick={this.clearColors}>Clear Palette\n                    </Button>\n                    <Button \n                    variant=\"contained\" \n                    color=\"primary\" \n                    onClick={this.addRandomColor}\n                    disabled={paletteIsFull}\n                    >Random Color</Button>\n                    </div>\n                    <ChromePicker \n                    color={this.state.currentColor} \n                    onChangeComplete={this.updateCurrentColor}\n                    />\n                    <ValidatorForm onSubmit={this.addNewColor}>\n                        <TextValidator \n                        value={this.state.newColorName}\n                        name=\"newColorName\"\n                        onChange={this.handleChange}\n                        validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n                        errorMessages={[\"this field is required\", \"Color name must be unique\", \"Color already used\"]}\n                        />\n                        <Button \n                            variant=\"contained\" \n                            type=\"submit\"\n                            color=\"primary\" \n                            style={{backgroundColor: paletteIsFull ? \"grey\" : this.state.currentColor}}\n                            disabled = {paletteIsFull}\n                            >{paletteIsFull ? \"Palette Full\" : \"Add Color\"}\n                        </Button>\n                    </ValidatorForm>\n                </Drawer>\n                <main\n                    className={classNames(classes.content, {\n                        [classes.contentShift]: open\n                    })}\n                >\n                    <div className={classes.drawerHeader} />\n                    <DraggableColorList \n                    colors={colors} \n                    removeColor={this.removeColor}\n                    axis=\"xy\"\n                    onSortEnd={this.onSortEnd}\n                    />\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}