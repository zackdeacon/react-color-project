{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js\";\nimport React, { Component } from 'react';\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button, colors } from '@material-ui/core';\nimport DraggableColorBox from \"./DraggableColorBox\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n  root: {\n    display: \"flex\"\n  },\n  appBar: {\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    })\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    marginLeft: drawerWidth,\n    transition: theme.transitions.create([\"margin\", \"width\"], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    })\n  },\n  menuButton: {\n    marginLeft: 12,\n    marginRight: 20\n  },\n  hide: {\n    display: \"none\"\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n    justifyContent: \"flex-end\"\n  },\n  content: {\n    flexGrow: 1,\n    height: \"calc(100vh - 64px)\",\n    padding: theme.spacing.unit * 3,\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginLeft: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create(\"margin\", {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginLeft: 0\n  }\n});\n\nclass NewPaletteForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleDrawerOpen = () => {\n      this.setState({\n        open: true\n      });\n    };\n\n    this.handleDrawerClose = () => {\n      this.setState({\n        open: false\n      });\n    };\n\n    this.state = {\n      open: true,\n      currentColor: \"teal\",\n      newColorName: \"\",\n      newPaletteName: \"\",\n      colors: [{\n        color: \"blue\",\n        name: \"blue\"\n      }]\n    };\n    this.updateCurrentColor = this.updateCurrentColor.bind(this);\n    this.addNewColor = this.addNewColor.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    ValidatorForm.addValidationRule(\"isColorNameUnique\", value => this.state.colors.every(({\n      name\n    }) => name.toLowerCase() !== value.toLowerCase()));\n    ValidatorForm.addValidationRule(\"isColorUnique\", value => this.state.colors.every(({\n      color\n    }) => color !== this.state.currentColor));\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => this.props.palettes.every(({\n      paletteName\n    }) => paletteName.toLowerCase() !== value.toLowerCase()));\n  }\n\n  updateCurrentColor(newColor) {\n    this.setState({\n      currentColor: newColor.hex\n    });\n  }\n\n  addNewColor() {\n    const newColor = {\n      color: this.state.currentColor,\n      name: this.state.newColorName\n    };\n    this.setState({\n      colors: [...this.state.colors, newColor],\n      newColorName: \"\"\n    });\n  }\n\n  handleChange(evt) {\n    this.setState({\n      [evt.target.name]: evt.target.value\n    });\n  }\n\n  handleSubmit() {\n    let newName = this.state.newPaletteName;\n    const newPalette = {\n      paletteName: newName,\n      id: newName.toLowerCase().replace(/ /g, \"-\"),\n      colors: this.state.colors\n    };\n    this.props.savePalette(newPalette);\n    this.props.history.push(\"/\");\n  }\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      open\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(AppBar, {\n        position: \"fixed\",\n        color: \"default\",\n        className: classNames(classes.appBar, {\n          [classes.appBarShift]: open\n        }),\n        children: /*#__PURE__*/_jsxDEV(Toolbar, {\n          disableGutters: !open,\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            color: \"inherit\",\n            \"aria-label\": \"Open drawer\",\n            onClick: this.handleDrawerOpen,\n            className: classNames(classes.menuButton, open && classes.hide),\n            children: /*#__PURE__*/_jsxDEV(MenuIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            color: \"inherit\",\n            noWrap: true,\n            children: \"Persistent drawer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n            onSubmit: this.handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n              value: this.state.newPaletteName,\n              label: \"palette Name\",\n              name: \"newPaletteName\",\n              onChange: this.handleChange,\n              validators: [\"required\"],\n              errorMessage: [\"Enter A Palette Name\"]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"contained\",\n              color: \"primary\",\n              type: \"submit\",\n              children: \"Save Palette\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Drawer, {\n        className: classes.drawer,\n        variant: \"persistent\",\n        anchor: \"left\",\n        open: open,\n        classes: {\n          paper: classes.drawerPaper\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: this.handleDrawerClose,\n            children: /*#__PURE__*/_jsxDEV(ChevronLeftIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h4\",\n          children: \"Design your palette!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"secondary\",\n            children: \"Clear Palette\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            children: \"Random Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ChromePicker, {\n          color: this.state.currentColor,\n          onChangeComplete: this.updateCurrentColor\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ValidatorForm, {\n          onSubmit: this.addNewColor,\n          children: [/*#__PURE__*/_jsxDEV(TextValidator, {\n            value: this.state.newColorName,\n            name: \"newColorName\",\n            onChange: this.handleChange,\n            validators: [\"required\", \"isColorNameUnique\", \"isColorUnique\"],\n            errorMessages: [\"this field is required\", \"Color name must be unique\", \"Color already used\"]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            type: \"submit\",\n            color: \"primary\",\n            style: {\n              backgroundColor: this.state.currentColor\n            },\n            children: \"Add Color\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classNames(classes.content, {\n          [classes.contentShift]: open\n        }),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.drawerHeader\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 21\n        }, this), this.state.colors.map(color => /*#__PURE__*/_jsxDEV(DraggableColorBox, {\n          color: color.color,\n          name: color.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default withStyles(styles, {\n  withTheme: true\n})(NewPaletteForm);","map":{"version":3,"sources":["/Users/zackdeacon/code/react-color-project/colors-app/src/NewPaletteForm.js"],"names":["React","Component","classNames","withStyles","Drawer","CssBaseline","AppBar","Toolbar","Typography","Divider","IconButton","MenuIcon","ChevronLeftIcon","ChromePicker","Button","colors","DraggableColorBox","ValidatorForm","TextValidator","drawerWidth","styles","theme","root","display","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","marginLeft","easeOut","enteringScreen","menuButton","marginRight","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","flexGrow","height","spacing","unit","contentShift","NewPaletteForm","constructor","props","handleDrawerOpen","setState","open","handleDrawerClose","state","currentColor","newColorName","newPaletteName","color","name","updateCurrentColor","bind","addNewColor","handleChange","handleSubmit","componentDidMount","addValidationRule","value","every","toLowerCase","palettes","paletteName","newColor","hex","evt","target","newName","newPalette","id","replace","savePalette","history","push","render","classes","paper","backgroundColor","map","withTheme"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport classNames from \"classnames\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport ChevronLeftIcon from \"@material-ui/icons/ChevronLeft\";\nimport { ChromePicker } from \"react-color\";\nimport { Button, colors } from '@material-ui/core';\nimport DraggableColorBox from \"./DraggableColorBox\";\nimport { ValidatorForm, TextValidator } from \"react-material-ui-form-validator\";\n\nconst drawerWidth = 400;\n\nconst styles = theme => ({\n    root: {\n        display: \"flex\"\n    },\n    appBar: {\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        })\n    },\n    appBarShift: {\n        width: `calc(100% - ${drawerWidth}px)`,\n        marginLeft: drawerWidth,\n        transition: theme.transitions.create([\"margin\", \"width\"], {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        })\n    },\n    menuButton: {\n        marginLeft: 12,\n        marginRight: 20\n    },\n    hide: {\n        display: \"none\"\n    },\n    drawer: {\n        width: drawerWidth,\n        flexShrink: 0\n    },\n    drawerPaper: {\n        width: drawerWidth\n    },\n    drawerHeader: {\n        display: \"flex\",\n        alignItems: \"center\",\n        padding: \"0 8px\",\n        ...theme.mixins.toolbar,\n        justifyContent: \"flex-end\"\n    },\n    content: {\n        flexGrow: 1,\n        height: \"calc(100vh - 64px)\",\n        padding: theme.spacing.unit * 3,\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.sharp,\n            duration: theme.transitions.duration.leavingScreen\n        }),\n        marginLeft: -drawerWidth\n    },\n    contentShift: {\n        transition: theme.transitions.create(\"margin\", {\n            easing: theme.transitions.easing.easeOut,\n            duration: theme.transitions.duration.enteringScreen\n        }),\n        marginLeft: 0\n    }\n});\nclass NewPaletteForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            open: true,\n            currentColor: \"teal\",\n            newColorName: \"\",\n            newPaletteName: \"\",\n            colors: [{ color: \"blue\", name: \"blue\" }]\n        }\n        this.updateCurrentColor = this.updateCurrentColor.bind(this);\n        this.addNewColor = this.addNewColor.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount(){\n        ValidatorForm.addValidationRule(\"isColorNameUnique\", value => \n            this.state.colors.every(\n                ({ name }) => name.toLowerCase() !== value.toLowerCase()\n            )        \n        );\n        ValidatorForm.addValidationRule(\"isColorUnique\", value => \n        this.state.colors.every(\n            (({ color }) => color !== this.state.currentColor)\n        )        \n    );\n    ValidatorForm.addValidationRule(\"isPaletteNameUnique\", value => \n    this.props.palettes.every(\n        (({ paletteName }) => paletteName.toLowerCase() !== value.toLowerCase())\n    )        \n);\n\n    }\n  \n    handleDrawerOpen = () => {\n        this.setState({ open: true });\n    };\n    handleDrawerClose = () => {\n        this.setState({ open: false });\n    };\n    updateCurrentColor(newColor) {\n        this.setState({ currentColor : newColor.hex })\n    }\n    addNewColor() {\n        const newColor = { \n        color: this.state.currentColor,\n        name: this.state.newColorName\n        };\n        this.setState({ colors: [...this.state.colors, newColor], newColorName: \"\" })\n    }\n    handleChange(evt) {\n        this.setState({\n            [evt.target.name]: evt.target.value\n        });\n    }\n    handleSubmit() {\n        let newName = this.state.newPaletteName;\n        const newPalette = {\n            paletteName: newName,\n            id: newName.toLowerCase().replace(/ /g, \"-\"),\n            colors: this.state.colors\n        };\n        this.props.savePalette(newPalette);\n        this.props.history.push(\"/\");\n    }\n    render() {\n        const { classes } = this.props;\n        const { open } = this.state;\n        return (\n            <div className={classes.root}>\n                <CssBaseline />\n                <AppBar\n                    position='fixed'\n                    color=\"default\"\n                    className={classNames(classes.appBar, {\n                        [classes.appBarShift]: open\n                    })}\n                >\n                    <Toolbar disableGutters={!open}>\n                        <IconButton\n                            color='inherit'\n                            aria-label='Open drawer'\n                            onClick={this.handleDrawerOpen}\n                            className={classNames(classes.menuButton, open && classes.hide)}\n                        >\n                            <MenuIcon />\n                        </IconButton>\n                        <Typography variant='h6' color='inherit' noWrap>\n                            Persistent drawer\n                </Typography>\n                <ValidatorForm onSubmit={this.handleSubmit}>\n                <TextValidator \n                value={this.state.newPaletteName}\n                label= \"palette Name\"\n                name= \"newPaletteName\"\n                onChange= {this.handleChange}\n                validators= {[\"required\"]}\n                errorMessage={[\"Enter A Palette Name\"]}\n                />\n                <Button variant=\"contained\" color=\"primary\" type=\"submit\">Save Palette</Button>\n                </ValidatorForm>\n                    </Toolbar>\n                </AppBar>\n                <Drawer\n                    className={classes.drawer}\n                    variant='persistent'\n                    anchor='left'\n                    open={open}\n                    classes={{\n                        paper: classes.drawerPaper\n                    }}\n                >\n                    <div className={classes.drawerHeader}>\n                        <IconButton onClick={this.handleDrawerClose}>\n                            <ChevronLeftIcon />\n                        </IconButton>\n                    </div>\n                    <Divider />\n                    <Typography variant=\"h4\">Design your palette!</Typography>\n                    <div>\n                    <Button variant=\"contained\" color=\"secondary\">Clear Palette</Button>\n                    <Button variant=\"contained\" color=\"primary\">Random Color</Button>\n                    </div>\n                    <ChromePicker \n                    color={this.state.currentColor} \n                    onChangeComplete={this.updateCurrentColor}\n                    />\n                    <ValidatorForm onSubmit={this.addNewColor}>\n                        <TextValidator \n                        value={this.state.newColorName}\n                        name=\"newColorName\"\n                        onChange={this.handleChange}\n                        validators={[\"required\", \"isColorNameUnique\", \"isColorUnique\"]}\n                        errorMessages={[\"this field is required\", \"Color name must be unique\", \"Color already used\"]}\n                        />\n                        <Button \n                            variant=\"contained\" \n                            type=\"submit\"\n                            color=\"primary\" \n                            style={{backgroundColor:this.state.currentColor}}\n                            >Add Color\n                        </Button>\n                    </ValidatorForm>\n                </Drawer>\n                <main\n                    className={classNames(classes.content, {\n                        [classes.contentShift]: open\n                    })}\n                >\n                    <div className={classes.drawerHeader} />\n                        {this.state.colors.map(color=> (\n                            <DraggableColorBox color={color.color} name={color.name}/>\n                        ))}\n                </main>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles, { withTheme: true })(NewPaletteForm);\n"]},"metadata":{},"sourceType":"module"}